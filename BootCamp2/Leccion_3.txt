üìò Lecci√≥n 3 ‚Äî Registro de usuarios (formulario + alta segura)

Parte A ‚Äî C√≥digo limpio (registrar.php)

<?php
require_once "conexion.php";

$mensaje = "";

if ($_SERVER["REQUEST_METHOD"] === "POST") {
    $nombre     = trim($_POST["nombre"] ?? "");
    $correo     = trim($_POST["correo"] ?? "");
    $contrasena = $_POST["contrasena"] ?? "";

    if ($nombre === "" || $correo === "" || $contrasena === "") {
        $mensaje = "Completa todos los campos.";
    } elseif (!filter_var($correo, FILTER_VALIDATE_EMAIL)) {
        $mensaje = "El correo no es v√°lido.";
    } else {
        $contrasena_hash = password_hash($contrasena, PASSWORD_DEFAULT);

        $sql = "INSERT INTO usuarios (nombre, correo, contrasena_hash) VALUES (?, ?, ?)";
        $sentencia = $conexion->prepare($sql);

        if ($sentencia) {
            $sentencia->bind_param("sss", $nombre, $correo, $contrasena_hash);
            if ($sentencia->execute()) {
                $mensaje = "Registro exitoso. Ahora puedes iniciar sesi√≥n.";
            } else {
                if ($conexion->errno === 1062) {
                    $mensaje = "El correo ya est√° registrado.";
                } else {
                    $mensaje = "Error al registrar: " . $conexion->error;
                }
            }
            $sentencia->close();
        } else {
            $mensaje = "Error al preparar la sentencia: " . $conexion->error;
        }
    }
}
?>
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Registro</title>
  <link rel="stylesheet" href="estilo.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <h1>Registro de usuario</h1>

  <?php if ($mensaje !== ""): ?>
    <p class="mensaje"><?= htmlspecialchars($mensaje) ?></p>
  <?php endif; ?>

  <form method="post" action="registrar.php" novalidate>
    <label for="nombre">Nombre</label>
    <input id="nombre" name="nombre" type="text" required maxlength="100" autocomplete="name">

    <label for="correo">Correo</label>
    <input id="correo" name="correo" type="email" required maxlength="120" autocomplete="email">

    <label for="contrasena">Contrase√±a</label>
    <input id="contrasena" name="contrasena" type="password" required minlength="6" autocomplete="new-password">

    <button type="submit">Crear cuenta</button>
  </form>

  <p>¬øYa tienes cuenta? <a href="iniciar_sesion.php">Inicia sesi√≥n</a></p>
</body>
</html>

Parte B ‚Äî Explicaci√≥n detallada l√≠nea por l√≠nea

Bloque PHP
	‚Ä¢	<?php
Inicia la secci√≥n de c√≥digo PHP.
	‚Ä¢	require_once "conexion.php";
Carga una vez el archivo de conexi√≥n para disponer de la variable $conexion y de la sesi√≥n iniciada.
	‚Ä¢	$mensaje = "";
Declara una variable de texto vac√≠a para mostrar retroalimentaci√≥n al usuario.
	‚Ä¢	if ($_SERVER["REQUEST_METHOD"] === "POST") {
Comprueba el m√©todo de la solicitud HTTP. Si es POST, significa que el formulario fue enviado y se debe procesar.
	‚Ä¢	$nombre     = trim($_POST["nombre"] ?? "");
Lee la clave nombre del arreglo $_POST. Usa el operador de fusi√≥n nula ?? para asignar "" si no existe. trim() elimina espacios al inicio y al final.
	‚Ä¢	$correo     = trim($_POST["correo"] ?? "");
Igual que la l√≠nea anterior, pero para el campo correo.
	‚Ä¢	$contrasena = $_POST["contrasena"] ?? "";
Lee la contrase√±a enviada. No se recortan espacios en blanco, pero se acepta que venga tal cual.
	‚Ä¢	if ($nombre === "" || $correo === "" || $contrasena === "") {
Valida que ning√∫n campo venga vac√≠o. El operador l√≥gico || es ‚Äúo‚Äù.
	‚Ä¢	$mensaje = "Completa todos los campos.";
Asigna el texto de error si falta alg√∫n dato.
	‚Ä¢	} elseif (!filter_var($correo, FILTER_VALIDATE_EMAIL)) {
Rama alternativa: verifica formato de correo con filter_var. El ! niega el resultado. Si no cumple el patr√≥n de email, entra aqu√≠.
	‚Ä¢	$mensaje = "El correo no es v√°lido.";
Mensaje espec√≠fico para formato de correo incorrecto.
	‚Ä¢	} else {
Si pas√≥ las validaciones, contin√∫a el flujo de registro.
	‚Ä¢	$contrasena_hash = password_hash($contrasena, PASSWORD_DEFAULT);
Genera un hash seguro de la contrase√±a usando el algoritmo por defecto (actualmente bcrypt/argon seg√∫n versi√≥n de PHP).
	‚Ä¢	$sql = "INSERT INTO usuarios (nombre, correo, contrasena_hash) VALUES (?, ?, ?)";
Declara la instrucci√≥n SQL con marcadores ? para usar una sentencia preparada.
	‚Ä¢	$sentencia = $conexion->prepare($sql);
Prepara la sentencia en el servidor. Devuelve un objeto de tipo mysqli_stmt en √©xito o false en error.
	‚Ä¢	if ($sentencia) {
Verifica que la preparaci√≥n fue correcta.
	‚Ä¢	$sentencia->bind_param("sss", $nombre, $correo, $contrasena_hash);
Asocia variables a los marcadores ?. La cadena "sss" indica tres par√°metros de tipo string.
	‚Ä¢	if ($sentencia->execute()) {
Ejecuta la sentencia en el servidor. Si la inserci√≥n fue correcta, devuelve true.
	‚Ä¢	$mensaje = "Registro exitoso. Ahora puedes iniciar sesi√≥n.";
Mensaje de confirmaci√≥n para el usuario.
	‚Ä¢	} else {
Rama cuando execute() falla.
	‚Ä¢	if ($conexion->errno === 1062) {
Revisa el c√≥digo de error de MySQL. 1062 corresponde a entrada duplicada (choca con √≠ndice UNIQUE), t√≠pico cuando el correo ya existe.
	‚Ä¢	$mensaje = "El correo ya est√° registrado.";
Mensaje espec√≠fico para duplicado.
	‚Ä¢	} else { $mensaje = "Error al registrar: " . $conexion->error; }
Mensaje gen√©rico concatenando el detalle de error que reporta MySQL.
	‚Ä¢	$sentencia->close();
Cierra la sentencia preparada y libera recursos.
	‚Ä¢	} else { $mensaje = "Error al preparar la sentencia: " . $conexion->error; }
Si prepare() fall√≥, informa el motivo.
	‚Ä¢	} (cierre de los bloques if y else)
Finaliza el procesamiento del formulario.

Bloque HTML
	‚Ä¢	<!DOCTYPE html>
Declara el tipo de documento como HTML5.
	‚Ä¢	<html lang="es">
Inicia el √°rbol HTML e indica idioma espa√±ol.
	‚Ä¢	<head> ‚Ä¶ </head>
Encabezado del documento: metadatos y enlaces.
	‚Ä¢	<meta charset="UTF-8">
Define la codificaci√≥n a UTF-8 para acentos y e√±es.
	‚Ä¢	<title>Registro</title>
T√≠tulo de la pesta√±a del navegador.
	‚Ä¢	<link rel="stylesheet" href="estilo.css">
Vincula la hoja de estilos externa.
	‚Ä¢	<meta name="viewport" content="width=device-width, initial-scale=1">
Ajuste responsivo para dispositivos m√≥viles.
	‚Ä¢	<body>
Cuerpo visual del documento.
	‚Ä¢	<h1>Registro de usuario</h1>
Encabezado principal.
	‚Ä¢	<?php if ($mensaje !== ""): ?> ... <?php endif; ?>
Bloque condicional embebido en HTML. Si $mensaje no es vac√≠o, imprime el p√°rrafo con la clase mensaje.
	‚Ä¢	<form method="post" action="registrar.php" novalidate>
Inicia formulario. method="post" define env√≠o por POST. action indica el mismo archivo. novalidate desactiva validaci√≥n HTML para dejar la responsabilidad al servidor (y evitar bloqueos en demos).
	‚Ä¢	<label for="nombre">Nombre</label>
Etiqueta asociada al control cuyo id es nombre.
	‚Ä¢	<input id="nombre" name="nombre" type="text" required maxlength="100" autocomplete="name">
Campo de texto. required exige contenido. maxlength limita longitud. autocomplete sugiere al navegador el tipo de dato.
	‚Ä¢	<label for="correo">Correo</label> / <input ... type="email" ...>
Campo de email. El type="email" activa validaci√≥n b√°sica del navegador y teclado adecuado en m√≥viles.
	‚Ä¢	<label for="contrasena">Contrase√±a</label> / <input ... type="password" ... minlength="6" autocomplete="new-password">
Campo de contrase√±a. minlength="6" fija m√≠nimo local. autocomplete="new-password" orienta a administrador de contrase√±as.
	‚Ä¢	<button type="submit">Crear cuenta</button>
Bot√≥n que env√≠a el formulario.
	‚Ä¢	<p>¬øYa tienes cuenta? <a href="iniciar_sesion.php">Inicia sesi√≥n</a></p>
Enlace de navegaci√≥n a la p√°gina de login.
	‚Ä¢	</body></html>
Cierra el documento.

üéØ Comprobaci√≥n r√°pida
	1.	Abre http://localhost/proyecto_crud/registrar.php.
	2.	Crea un usuario.
	3.	En phpMyAdmin: SELECT id,nombre,correo FROM usuarios ORDER BY id DESC LIMIT 5; y verifica el alta.
	4.	Repite con el mismo correo para ver el mensaje de duplicado.
